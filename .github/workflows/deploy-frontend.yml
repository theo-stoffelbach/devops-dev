name: üöÄ Build & Push Frontend to Scaleway

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-app:
    name: üèóÔ∏è Build APP
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Scaleway Container Registry
        run: echo "${{ secrets.SCW_SECRET_KEY }}" | docker login rg.fr-par.scw.cloud -u nologin --password-stdin

      - name: Inject VITE_API_URL
        run: echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" > front/.env.production

      - name: Build and push APP image
        run: |
          docker build -t rg.fr-par.scw.cloud/namespace-theo-stoffelbach-final/my-front:latest ./front
          docker push rg.fr-par.scw.cloud/namespace-theo-stoffelbach-final/my-front:latest

  deploy-app:
    name: Deploy APP
    runs-on: ubuntu-latest
    needs: build-app
    steps:
      - name: Install Scaleway CLI
        run: |
          # T√©l√©chargement direct du binaire depuis GitHub releases  
          VERSION="2.41.0"
          wget -O scw "https://github.com/scaleway/scaleway-cli/releases/download/v${VERSION}/scaleway-cli_${VERSION}_linux_amd64"
          chmod +x scw
          sudo mv scw /usr/local/bin/scw
          scw version

      - name: Configure Scaleway CLI
        run: |
          scw config set access-key ${{ secrets.SCW_ACCESS_KEY }}
          scw config set secret-key ${{ secrets.SCW_SECRET_KEY }}
          scw config set default-project-id ${{ secrets.SCW_PROJECT_ID }}
          scw config set default-region fr-par

      - name: Deploy or update frontend container
        run: |
          # R√©cup√©rer l'ID du namespace
          NAMESPACE_ID=$(scw container namespace list -o json | jq -r '.[] | select(.name=="namespace-theo-stoffelbach-final") | .id')

          if [ -z "$NAMESPACE_ID" ]; then
            echo "‚ùå Namespace non trouv√©!"
            exit 1
          fi

          echo "‚úÖ Namespace ID: $NAMESPACE_ID"

          # V√©rifier si le container existe d√©j√†
          CONTAINER_ID=$(scw container container list namespace-id=$NAMESPACE_ID -o json | jq -r '.[] | select(.name=="frontend-web") | .id // empty')

          if [ -z "$CONTAINER_ID" ]; then
            echo "üÜï Cr√©ation du container frontend..."
            CONTAINER_ID=$(scw container container create \
              namespace-id=$NAMESPACE_ID \
              name=frontend-web \
              registry-image=rg.fr-par.scw.cloud/namespace-theo-stoffelbach-final/my-front:latest \
              port=80 \
              min-scale=0 \
              max-scale=3 \
              memory-limit=256 \
              cpu-limit=250 \
              privacy=public \
              -o json | jq -r '.id')
            echo "‚úÖ Container cr√©√©: $CONTAINER_ID"
          else
            echo "üîÑ Mise √† jour du container existant: $CONTAINER_ID"
            scw container container update \
              container-id=$CONTAINER_ID \
              registry-image=rg.fr-par.scw.cloud/namespace-theo-stoffelbach-final/my-front:latest
          fi

          # D√©ployer le container
          echo "üöÄ D√©ploiement du container..."
          scw container container deploy container-id=$CONTAINER_ID

          # Attendre et afficher l'URL
          sleep 10
          CONTAINER_URL=$(scw container container get container-id=$CONTAINER_ID -o json | jq -r '.domain_name')
          echo "‚úÖ Frontend d√©ploy√©: https://$CONTAINER_URL"
