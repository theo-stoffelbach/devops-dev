name: 🚀 Deploy to Scaleway Serverless

on:
  push:
    branches: [main]
    tags: ["v*"]
  workflow_dispatch:

env:
  SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
  SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
  SCW_DEFAULT_ORGANIZATION_ID: ${{ secrets.SCW_DEFAULT_ORGANIZATION_ID }}
  SCW_DEFAULT_PROJECT_ID: ${{ secrets.SCW_DEFAULT_PROJECT_ID }}
  SCW_DEFAULT_REGION: fr-par
  REGISTRY_ENDPOINT: rg.fr-par.scw.cloud

jobs:
  deploy-scaleway:
    name: 🚀 Deploy to Scaleway Serverless Containers
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Install Scaleway CLI
        run: |
          curl -o /usr/local/bin/scw -L "https://github.com/scaleway/scaleway-cli/releases/latest/download/scw-$(curl -s https://api.github.com/repos/scaleway/scaleway-cli/releases/latest | grep tag_name | cut -d'"' -f4 | tr -d v)-linux-amd64"
          chmod +x /usr/local/bin/scw
          scw version

      - name: 🔑 Configure Scaleway CLI
        run: |
          scw config set access-key=$SCW_ACCESS_KEY
          scw config set secret-key=$SCW_SECRET_KEY
          scw config set default-organization-id=$SCW_DEFAULT_ORGANIZATION_ID
          scw config set default-project-id=$SCW_DEFAULT_PROJECT_ID
          scw config set default-region=$SCW_DEFAULT_REGION

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Scaleway Container Registry
        run: echo "$SCW_SECRET_KEY" | docker login $REGISTRY_ENDPOINT -u nologin --password-stdin

      - name: 🏗️ Build and Push Backend Image
        run: |
          cd back
          docker build -t $REGISTRY_ENDPOINT/devops-backend/api:latest .
          docker build -t $REGISTRY_ENDPOINT/devops-backend/api:${{ github.sha }} .
          docker push $REGISTRY_ENDPOINT/devops-backend/api:latest
          docker push $REGISTRY_ENDPOINT/devops-backend/api:${{ github.sha }}

      - name: 🎨 Build and Push Frontend Image
        run: |
          cd front
          docker build -t $REGISTRY_ENDPOINT/devops-frontend/web:latest .
          docker build -t $REGISTRY_ENDPOINT/devops-frontend/web:${{ github.sha }} .
          docker push $REGISTRY_ENDPOINT/devops-frontend/web:latest
          docker push $REGISTRY_ENDPOINT/devops-frontend/web:${{ github.sha }}

      - name: 📦 Create or Update Namespaces
        run: |
          # Créer les namespaces s'ils n'existent pas
          scw container namespace create name=backend-api region=$SCW_DEFAULT_REGION || echo "Backend namespace exists"
          scw container namespace create name=frontend-web region=$SCW_DEFAULT_REGION || echo "Frontend namespace exists"

          # Récupérer les IDs
          echo "BACKEND_NS=$(scw container namespace list -o json | jq -r '.[] | select(.name=="backend-api") | .id')" >> $GITHUB_ENV
          echo "FRONTEND_NS=$(scw container namespace list -o json | jq -r '.[] | select(.name=="frontend-web") | .id')" >> $GITHUB_ENV

      - name: 🚀 Deploy Backend Container
        run: |
          # Supprimer l'ancien container s'il existe
          OLD_BACKEND=$(scw container container list namespace-id=$BACKEND_NS -o json | jq -r '.[0].id // empty')
          if [ ! -z "$OLD_BACKEND" ]; then
            echo "Deleting old backend container..."
            scw container container delete container-id=$OLD_BACKEND force=true || true
            sleep 10
          fi

          # Créer et déployer le nouveau container
          BACKEND_CONTAINER=$(scw container container create \
            namespace-id=$BACKEND_NS \
            name=api-server \
            registry-image=$REGISTRY_ENDPOINT/devops-backend/api:${{ github.sha }} \
            port=3000 \
            min-scale=0 \
            max-scale=5 \
            memory-limit=512 \
            cpu-limit=500 \
                      environment-variables.DATABASE_URL="file:/app/data/prod.db" \
          environment-variables.JWT_SECRET="github-actions-jwt-secret" \
          environment-variables.DEFAULT_ADMIN_PASSWORD="admin123" \
          environment-variables.BCRYPT_SALT_ROUNDS="10" \
          environment-variables.NODE_ENV="production" \
            privacy=public \
            -o json | jq -r '.id')
            
          echo "BACKEND_CONTAINER=$BACKEND_CONTAINER" >> $GITHUB_ENV
          echo "✅ Backend container created: $BACKEND_CONTAINER"

          # Déployer
          scw container container deploy container-id=$BACKEND_CONTAINER

      - name: ⏳ Wait for Backend Deployment
        run: |
          max_attempts=30
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            status=$(scw container container get container-id=$BACKEND_CONTAINER -o json | jq -r '.status')
            
            if [ "$status" == "ready" ]; then
              echo "✅ Backend container is ready!"
              break
            elif [ "$status" == "error" ]; then
              echo "❌ Backend deployment failed"
              exit 1
            fi
            
            echo "⏳ Attempt $attempt/$max_attempts - Backend status: $status"
            sleep 10
            ((attempt++))
          done

          if [ $attempt -gt $max_attempts ]; then
            echo "❌ Backend deployment timeout"
            exit 1
          fi

          # Récupérer l'URL du backend
          BACKEND_URL=$(scw container container get container-id=$BACKEND_CONTAINER -o json | jq -r '.domain_name')
          echo "BACKEND_URL=$BACKEND_URL" >> $GITHUB_ENV
          echo "✅ Backend deployed at: https://$BACKEND_URL"

      - name: 🌐 Deploy Frontend Container
        run: |
          # Supprimer l'ancien container s'il existe
          OLD_FRONTEND=$(scw container container list namespace-id=$FRONTEND_NS -o json | jq -r '.[0].id // empty')
          if [ ! -z "$OLD_FRONTEND" ]; then
            echo "Deleting old frontend container..."
            scw container container delete container-id=$OLD_FRONTEND force=true || true
            sleep 10
          fi

          # Créer et déployer le nouveau container avec l'URL du backend
          FRONTEND_CONTAINER=$(scw container container create \
            namespace-id=$FRONTEND_NS \
            name=web-client \
            registry-image=$REGISTRY_ENDPOINT/devops-frontend/web:${{ github.sha }} \
            port=8080 \
            min-scale=0 \
            max-scale=3 \
            memory-limit=256 \
            cpu-limit=250 \
            environment-variables.VITE_API_URL="https://$BACKEND_URL" \
            privacy=public \
            -o json | jq -r '.id')
            
          echo "FRONTEND_CONTAINER=$FRONTEND_CONTAINER" >> $GITHUB_ENV
          echo "✅ Frontend container created: $FRONTEND_CONTAINER"

          # Déployer
          scw container container deploy container-id=$FRONTEND_CONTAINER

      - name: ⏳ Wait for Frontend Deployment
        run: |
          max_attempts=30
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            status=$(scw container container get container-id=$FRONTEND_CONTAINER -o json | jq -r '.status')
            
            if [ "$status" == "ready" ]; then
              echo "✅ Frontend container is ready!"
              break
            elif [ "$status" == "error" ]; then
              echo "❌ Frontend deployment failed"
              exit 1
            fi
            
            echo "⏳ Attempt $attempt/$max_attempts - Frontend status: $status"
            sleep 10
            ((attempt++))
          done

          if [ $attempt -gt $max_attempts ]; then
            echo "❌ Frontend deployment timeout"
            exit 1
          fi

          # Récupérer l'URL du frontend
          FRONTEND_URL=$(scw container container get container-id=$FRONTEND_CONTAINER -o json | jq -r '.domain_name')
          echo "FRONTEND_URL=$FRONTEND_URL" >> $GITHUB_ENV
          echo "✅ Frontend deployed at: https://$FRONTEND_URL"

      - name: 📊 Deployment Summary
        run: |
          echo "## 🎉 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Application URLs" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend API:** https://$BACKEND_URL" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend Web:** https://$FRONTEND_URL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Container Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend Container ID:** \`$BACKEND_CONTAINER\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend Container ID:** \`$FRONTEND_CONTAINER\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏷️ Images Deployed" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend:** \`$REGISTRY_ENDPOINT/devops-backend/api:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend:** \`$REGISTRY_ENDPOINT/devops-frontend/web:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Test your app:** [Frontend](https://$FRONTEND_URL) | [Backend Health](https://$BACKEND_URL/health)" >> $GITHUB_STEP_SUMMARY
